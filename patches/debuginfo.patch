Index: coregrind/m_debuginfo/debuginfo.c
===================================================================
--- coregrind/m_debuginfo/debuginfo.c	(revision 14636)
+++ coregrind/m_debuginfo/debuginfo.c	(working copy)
@@ -3466,7 +3466,96 @@
 #  undef TXTR
 }
 
+/* Format the acquired information into DN(AME)1 and DN(AME)2, which
+   are XArray*s of HChar, that have been initialised by the caller.
+   Resulting strings will be zero terminated.  Information is
+   formatted in a unintelligible way; namely an encoding scheme used
+   by the tool to speedup program execution.  If frameNo is
+   -1, this is assumed to be a global variable; else a local
+   variable. */
 
+static void format_message_gleipnir ( /*MOD*/XArray* /* of HChar */ dn1,
+                             /*MOD*/XArray* /* of HChar */ dn2,
+                             Addr     data_addr,
+                             DebugInfo* di,
+                             DiVariable* var,
+                             PtrdiffT var_offset,
+                             PtrdiffT residual_offset,
+                             XArray* /*HChar*/ described,
+                             Int      frameNo, 
+                             ThreadId tid )
+{
+   Bool   have_descr, have_srcloc;
+
+   vg_assert(frameNo >= -1);
+   vg_assert(dn1 && dn2);
+   vg_assert(described);
+   vg_assert(var && var->name);
+   have_descr = VG_(sizeXA)(described) > 0
+                && *(UChar*)VG_(indexXA)(described,0) != '\0';
+   const HChar *fileName = ML_(fndn_ix2filename)(di, var->fndn_ix);
+   // fileName will be "???" if var->fndn_ix == 0.
+   // fileName will only be used if have_descr is True.
+ 
+   have_srcloc = var->fndn_ix > 0 && var->lineNo > 0;
+
+   /* ------ local cases ------ */
+
+   if ( frameNo >= 0 && (!have_srcloc) && (!have_descr) ) {
+      /* no srcloc, no description: */
+      p2XA( dn1, "LV %s", var->name );
+      p2XA( dn2, "VO:%lu", var_offset );
+   } 
+   else
+   if ( frameNo >= 0 && have_srcloc && (!have_descr) ) {
+      /* no description: */
+      p2XA( dn1, "LV %s", var->name );
+      p2XA( dn2, "VO:%lu, FN:%s, LN:%d", var_offset, fileName, var->lineNo );
+   }
+   else
+   if ( frameNo >= 0 && (!have_srcloc) && have_descr ) {
+      /* no srcloc: */
+      p2XA( dn1, "LS %s%s", var->name, (HChar*)(VG_(indexXA)(described,0)) );
+      p2XA( dn2, "VO:%lu", residual_offset );
+   } 
+   else
+   if ( frameNo >= 0 && have_srcloc && have_descr ) {
+      p2XA( dn1, "LS %s%s", var->name, (HChar*)(VG_(indexXA)(described,0)) );
+      p2XA( dn2, "VO:%lu, FN:%s, LN:%d", residual_offset, fileName, var->lineNo );
+   }
+   else
+   /* ------ global cases ------ */
+   if ( frameNo >= -1 && (!have_srcloc) && (!have_descr) ) {
+      /* no srcloc, no description: */
+      p2XA( dn1, "GV %s", var->name);
+      p2XA( dn2, "VO:%lu", var_offset );
+   } 
+   else
+   if ( frameNo >= -1 && have_srcloc && (!have_descr) ) {
+      /* no description: */
+      p2XA( dn1, "GV %s", var->name );
+      p2XA( dn2, "VO:%lu, FN:%s, LN:%d", var_offset, fileName, var->lineNo );
+   }
+   else
+   if ( frameNo >= -1 && (!have_srcloc) && have_descr ) {
+      /* no srcloc: */
+      p2XA( dn1, "GS %s%s", var->name, (HChar*)(VG_(indexXA)(described,0)) );
+      p2XA( dn2, "VO:%lu", residual_offset );
+   } 
+   else
+   if ( frameNo >= -1 && have_srcloc && have_descr ) {
+      p2XA( dn1, "GS %s%s", var->name, (HChar*)(VG_(indexXA)(described,0)) );
+      p2XA( dn2, "VO:%lu, FN:%s, LN:%d", residual_offset, fileName, var->lineNo );
+   }
+   else 
+      vg_assert(0);
+
+   /* Zero terminate both strings */
+   zterm_XA( dn1 );
+   zterm_XA( dn2 );
+
+}
+
 /* Determine if data_addr is a local variable in the frame
    characterised by (ip,sp,fp), and if so write its description at the
    ends of DNAME{1,2}, which are XArray*s of HChar, that have been
@@ -3594,6 +3683,133 @@
    return False;
 }
 
+/* Determine if data_addr is a local variable in the frame
+   characterised by (ip,sp,fp), and if so write its description at the
+   ends of DNAME{1,2}, which are XArray*s of HChar, that have been
+   initialised by the caller, zero terminate both, and return True.
+   If it's not a local variable in said frame, return False. */
+static 
+Bool consider_vars_in_frame_gleipnir ( /*MOD*/XArray* /* of HChar */ dname1,
+                              /*MOD*/XArray* /* of HChar */ dname2,
+                              Addr data_addr,
+                              Addr ip, Addr sp, Addr fp,
+                              /* shown to user: */
+                              ThreadId tid, Int frameNo )
+{
+   Word       i;
+   DebugInfo* di;
+   RegSummary regs;
+   Bool debug = False;
+
+   static UInt n_search = 0;
+   static UInt n_steps = 0;
+   n_search++;
+   if (debug)
+      VG_(printf)("QQQQ: cvif: ip,sp,fp %#lx,%#lx,%#lx\n", ip,sp,fp);
+   /* first, find the DebugInfo that pertains to 'ip'. */
+   for (di = debugInfo_list; di; di = di->next) {
+      n_steps++;
+      /* text segment missing? unlikely, but handle it .. */
+      if (!di->text_present || di->text_size == 0)
+         continue;
+      /* Ok.  So does this text mapping bracket the ip? */
+      if (di->text_avma <= ip && ip < di->text_avma + di->text_size)
+         break;
+   }
+ 
+   /* Didn't find it.  Strange -- means ip is a code address outside
+      of any mapped text segment.  Unlikely but not impossible -- app
+      could be generating code to run. */
+   if (!di)
+      return False;
+
+   if (0 && ((n_search & 0x1) == 0))
+      VG_(printf)("consider_vars_in_frame: %u searches, "
+                  "%u DebugInfos looked at\n", 
+                  n_search, n_steps);
+   /* Start of performance-enhancing hack: once every ??? (chosen
+      hackily after profiling) successful searches, move the found
+      DebugInfo one step closer to the start of the list.  This makes
+      future searches cheaper. */
+   if ((n_search & 0xFFFF) == 0) {
+      /* Move si one step closer to the start of the list. */
+      move_DebugInfo_one_step_forward( di );
+   }
+   /* End of performance-enhancing hack. */
+
+   /* any var info at all? */
+   if (!di->varinfo)
+      return False;
+
+   /* Work through the scopes from most deeply nested outwards,
+      looking for code address ranges that bracket 'ip'.  The
+      variables on each such address range found are in scope right
+      now.  Don't descend to level zero as that is the global
+      scope. */
+   regs.ip = ip;
+   regs.sp = sp;
+   regs.fp = fp;
+
+   /* "for each scope, working outwards ..." */
+   for (i = VG_(sizeXA)(di->varinfo) - 1; i >= 1; i--) {
+      XArray*      vars;
+      Word         j;
+      DiAddrRange* arange;
+      OSet*        this_scope 
+         = *(OSet**)VG_(indexXA)( di->varinfo, i );
+      if (debug)
+         VG_(printf)("QQQQ:   considering scope %ld\n", (Word)i);
+      if (!this_scope)
+         continue;
+      /* Find the set of variables in this scope that
+         bracket the program counter. */
+      arange = VG_(OSetGen_LookupWithCmp)(
+                  this_scope, &ip, 
+                  ML_(cmp_for_DiAddrRange_range)
+               );
+      if (!arange)
+         continue;
+      /* stay sane */
+      vg_assert(arange->aMin <= arange->aMax);
+      /* It must bracket the ip we asked for, else
+         ML_(cmp_for_DiAddrRange_range) is somehow broken. */
+      vg_assert(arange->aMin <= ip && ip <= arange->aMax);
+      /* It must have an attached XArray of DiVariables. */
+      vars = arange->vars;
+      vg_assert(vars);
+      /* But it mustn't cover the entire address range.  We only
+         expect that to happen for the global scope (level 0), which
+         we're not looking at here.  Except, it may cover the entire
+         address range, but in that case the vars array must be
+         empty. */
+      vg_assert(! (arange->aMin == (Addr)0
+                   && arange->aMax == ~(Addr)0
+                   && VG_(sizeXA)(vars) > 0) );
+      for (j = 0; j < VG_(sizeXA)( vars ); j++) {
+         DiVariable* var = (DiVariable*)VG_(indexXA)( vars, j );
+         PtrdiffT    offset;
+         if (debug)
+            VG_(printf)("QQQQ:    var:name=%s %#lx-%#lx %#lx\n",
+                        var->name,arange->aMin,arange->aMax,ip);
+         if (data_address_is_in_var( &offset, di->admin_tyents,
+                                     var, &regs,
+                                     data_addr, di )) {
+            PtrdiffT residual_offset = 0;
+            XArray* described = ML_(describe_type)( &residual_offset,
+                                                    di->admin_tyents, 
+                                                    var->typeR, offset );
+            format_message_gleipnir( dname1, dname2,
+                            data_addr, di, var, offset, residual_offset,
+                            described, frameNo, tid );
+            VG_(deleteXA)( described );
+            return True;
+         }
+      }
+   }
+
+   return False;
+}
+
 /* Try to form some description of DATA_ADDR by looking at the DWARF3
    debug info we have.  This considers all global variables, and 8
    frames in the stacks of all threads.  Result is written at the ends
@@ -3776,7 +3992,182 @@
 #  undef N_FRAMES
 }
 
+/* This function is identical to the preceding function; the 
+ * only difference is that the gleipnir function will call
+ * format_message_gleipnir().  This call is necessary to add
+ * additional information and to change the "message" into an
+ * encoding.
+ */
 
+Bool VG_(get_data_description_gleipnir)( 
+        /*MOD*/ void* /* really, XArray* of HChar */ dname1v,
+        /*MOD*/ void* /* really, XArray* of HChar */ dname2v,
+        Addr data_addr
+     )
+{
+#  define N_FRAMES 8
+   Addr ips[N_FRAMES], sps[N_FRAMES], fps[N_FRAMES];
+   UInt n_frames;
+
+   Addr       stack_min, stack_max;
+   ThreadId   tid;
+   Bool       found;
+   DebugInfo* di;
+   Word       j;
+
+   XArray*    dname1 = (XArray*)dname1v;
+   XArray*    dname2 = (XArray*)dname2v;
+
+   if (0) VG_(printf)("get_data_description: dataaddr %#lx\n", data_addr);
+   /* First, see if data_addr is (or is part of) a global variable.
+      Loop over the DebugInfos we have.  Check data_addr against the
+      outermost scope of all of them, as that should be a global
+      scope. */
+   for (di = debugInfo_list; di != NULL; di = di->next) {
+      OSet*        global_scope;
+      Word         gs_size;
+      Addr         zero;
+      DiAddrRange* global_arange;
+      Word         i;
+      XArray*      vars;
+
+      /* text segment missing? unlikely, but handle it .. */
+      if (!di->text_present || di->text_size == 0)
+         continue;
+      /* any var info at all? */
+      if (!di->varinfo)
+         continue;
+      /* perhaps this object didn't contribute any vars at all? */
+      if (VG_(sizeXA)( di->varinfo ) == 0)
+         continue;
+      global_scope = *(OSet**)VG_(indexXA)( di->varinfo, 0 );
+      vg_assert(global_scope);
+      gs_size = VG_(OSetGen_Size)( global_scope );
+      /* The global scope might be completely empty if this
+         compilation unit declared locals but nothing global. */
+      if (gs_size == 0)
+          continue;
+      /* But if it isn't empty, then it must contain exactly one
+         element, which covers the entire address range. */
+      vg_assert(gs_size == 1);
+      /* Fish out the global scope and check it is as expected. */
+      zero = 0;
+      global_arange 
+         = VG_(OSetGen_Lookup)( global_scope, &zero );
+      /* The global range from (Addr)0 to ~(Addr)0 must exist */
+      vg_assert(global_arange);
+      vg_assert(global_arange->aMin == (Addr)0
+                && global_arange->aMax == ~(Addr)0);
+      /* Any vars in this range? */
+      if (!global_arange->vars)
+         continue;
+      /* Ok, there are some vars in the global scope of this
+         DebugInfo.  Wade through them and see if the data addresses
+         of any of them bracket data_addr. */
+      vars = global_arange->vars;
+      for (i = 0; i < VG_(sizeXA)( vars ); i++) {
+         PtrdiffT offset;
+         DiVariable* var = (DiVariable*)VG_(indexXA)( vars, i );
+         vg_assert(var->name);
+         /* Note we use a NULL RegSummary* here.  It can't make any
+            sense for a global variable to have a location expression
+            which depends on a SP/FP/IP value.  So don't supply any.
+            This means, if the evaluation of the location
+            expression/list requires a register, we have to let it
+            fail. */
+         if (data_address_is_in_var( &offset, di->admin_tyents, var, 
+                                     NULL/* RegSummary* */, 
+                                     data_addr, di )) {
+            PtrdiffT residual_offset = 0;
+            XArray* described = ML_(describe_type)( &residual_offset,
+                                                    di->admin_tyents,
+                                                    var->typeR, offset );
+            format_message_gleipnir( dname1, dname2,
+                            data_addr, di, var, offset, residual_offset,
+                            described, -1/*frameNo*/,
+                            VG_INVALID_THREADID );
+            VG_(deleteXA)( described );
+            zterm_XA( dname1 );
+            zterm_XA( dname2 );
+            return True;
+         }
+      }
+   }
+
+   /* Ok, well it's not a global variable.  So now let's snoop around
+      in the stacks of all the threads.  First try to figure out which
+      thread's stack data_addr is in. */
+
+   /* Perhaps it's on a thread's stack? */
+   found = False;
+   VG_(thread_stack_reset_iter)(&tid);
+   while ( VG_(thread_stack_next)(&tid, &stack_min, &stack_max) ) {
+      if (stack_min >= stack_max)
+         continue; /* ignore obviously stupid cases */
+      if (stack_min - VG_STACK_REDZONE_SZB <= data_addr
+          && data_addr <= stack_max) {
+         found = True;
+         break;
+      }
+   }
+   if (!found) {
+      zterm_XA( dname1 );
+      zterm_XA( dname2 );
+      return False;
+   }
+
+   /* We conclude data_addr is in thread tid's stack.  Unwind the
+      stack to get a bunch of (ip,sp,fp) triples describing the
+      frames, and for each frame, consider the local variables. */
+   n_frames = VG_(get_StackTrace)( tid, ips, N_FRAMES,
+                                   sps, fps, 0/*first_ip_delta*/ );
+
+   vg_assert(n_frames >= 0 && n_frames <= N_FRAMES);
+   for (j = 0; j < n_frames; j++) {
+      if (consider_vars_in_frame_gleipnir( dname1, dname2,
+                                  data_addr,
+                                  ips[j], 
+                                  sps[j], fps[j], tid, j )) {
+         zterm_XA( dname1 );
+         zterm_XA( dname2 );
+         return True;
+      }
+      /* Now, it appears that gcc sometimes appears to produce
+         location lists whose ranges don't actually cover the call
+         instruction, even though the address of the variable in
+         question is passed as a parameter in the call.  AFAICS this
+         is simply a bug in gcc - how can the variable be claimed not
+         exist in memory (on the stack) for the duration of a call in
+         which its address is passed?  But anyway, in the particular
+         case I investigated (memcheck/tests/varinfo6.c, call to croak
+         on line 2999, local var budget declared at line 3115
+         appearing not to exist across the call to mainSort on line
+         3143, "gcc.orig (GCC) 3.4.4 20050721 (Red Hat 3.4.4-2)" on
+         amd64), the variable's location list does claim it exists
+         starting at the first byte of the first instruction after the
+         call instruction.  So, call consider_vars_in_frame a second
+         time, but this time add 1 to the IP.  GDB handles this
+         example with no difficulty, which leads me to believe that
+         either (1) I misunderstood something, or (2) GDB has an
+         equivalent kludge. */
+      if (j > 0 /* this is a non-innermost frame */
+          && consider_vars_in_frame_gleipnir( dname1, dname2,
+                                     data_addr,
+                                     ips[j] + 1, 
+                                     sps[j], fps[j], tid, j )) {
+         zterm_XA( dname1 );
+         zterm_XA( dname2 );
+         return True;
+      }
+   }
+
+   /* We didn't find anything useful. */
+   zterm_XA( dname1 );
+   zterm_XA( dname2 );
+   return False;
+#  undef N_FRAMES
+}
+
 //////////////////////////////////////////////////////////////////
 //                                                              //
 // Support for other kinds of queries to the Dwarf3 var info    //
Index: include/pub_tool_debuginfo.h
===================================================================
--- include/pub_tool_debuginfo.h	(revision 14638)
+++ include/pub_tool_debuginfo.h	(working copy)
@@ -116,6 +116,12 @@
         Addr data_addr
      );
 
+Bool VG_(get_data_description_gleipnir)( 
+        /*MOD*/ void* /* really, XArray* of HChar */ dname1v,
+        /*MOD*/ void* /* really, XArray* of HChar */ dname2v,
+        Addr data_addr
+     );
+
 /* Succeeds if the address is within a shared object or the main executable.
    It doesn't matter if debug info is present or not. */
 extern Bool VG_(get_objname)  ( Addr a, HChar* objname, Int n_objname );
